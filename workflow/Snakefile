import pandas as pd


configfile: "config/config.yaml"


callsets = pd.read_csv(config["callsets"], sep="\t", comment="#")


rule all:
    input:
        collect(
            "results/fhir/{callset}.{fmt}",
            callset=callsets["callset"],
            fmt=["json", "yaml"],
        ),


rule get_genome:
    output:
        "resources/genome.fasta",
    params:
        species="homo_sapiens",
        datatype="dna",
        build=lookup("ref/build", within=config),
        release=lookup("ref/release", within=config),
    log:
        "logs/get_genome.log",
    cache: "omit-software"
    wrapper:
        "v6.2.0/bio/reference/ensembl-sequence"


rule get_vep_cache:
    output:
        directory("resources/vep/cache"),
    params:
        species="homo_sapiens",
        build=lookup("ref/build", within=config),
        release=lookup("ref/release", within=config),
    log:
        "logs/vep/cache.log",
    cache: "omit-software"
    wrapper:
        "v6.2.0/bio/vep/cache"


rule get_vep_plugins:
    output:
        directory("resources/vep/plugins"),
    params:
        release=lookup("ref/release", within=config),
    cache: "omit-software"
    wrapper:
        "v6.2.0/bio/vep/plugins"


rule annotate_variants:
    input:
        calls=lookup(query="callset == '{callset}'", within=callsets, cols=["calls"]),
        # cache="resources/vep/cache",
        plugins="resources/vep/plugins",
        fasta="resources/genome.fasta",
    output:
        calls="results/annotated/{callset}.bcf",
        stats="results/annotated/{callset}.html",
    params:
        plugins=[],
        # The following flags add all fields required by vembrane fhir.
        # --numbers, --symbol, and --hgvs are part of --everything as well.
        extra="--numbers --symbol --hgvs --hgvsg --vcf_info_field ANN --database",
    log:
        "logs/vep/annotate/{callset}.log",
    threads: 4
    wrapper:
        "v6.2.0/bio/vep/annotate"


rule vembrane_fhir:
    input:
        "results/annotated/{callset}.bcf",
    output:
        "results/fhir/{callset}.{fmt}",
    log:
        "logs/vembrane/fhir/{callset}/{fmt}.log",
    params:
        build=lookup("ref/build", within=config),
        sample=lookup(
            query="callset == '{callset}'", within=callsets, cols=["tumor_sample"]
        ),
        confidence_status=lookup("expressions/confidence_status", within=config).strip(),
        sample_allelic_frequency=lookup(
            "expressions/sample_allelic_frequency", within=config
        ).strip(),
    conda:
        "envs/vembrane.yaml"
    shell:
        "vembrane fhir {input} {params.sample} {params.build} "
        "--profile mii_molgen_v2025.0.0 "
        "--output-fmt {wildcards.fmt} "
        "--sample-allelic-frequency {params.sample_allelic_frequency:q} "
        "--confidence-status {params.confidence_status:q} "
        "> {output} 2> {log}"
